worker_processes  ${WORKER_PROCESSES};
worker_cpu_affinity ${WORKER_CPU_AFFINITY};

error_log  ./logs/error.log;
pid        ./pid/nginx.pid;
worker_rlimit_nofile 102400;

events {
    use epoll;
    multi_accept on;
    accept_mutex_delay 50ms;
    worker_connections 81920;
}

# optional: path of orange.conf
env ORANGE_CONF;

http {
    resolver 10.20.1.13 10.20.2.13; # replace it with your favorite config
    charset UTF-8;
    include ./mime.types;

    log_format  main '$remote_addr - $remote_user [$time_local] "$request" '
    '$status $body_bytes_sent "$http_referer" '
    '"$http_user_agent" "$http_x_forwarded_for"';
    access_log  ./logs/access.log  main;
    error_log ./logs/error.log info;

    sendfile        on;
    tcp_nopush      off;
    keepalive_timeout  65;

    gzip on;
    gzip_min_length    1k;
    gzip_buffers       4 8k;
    gzip_http_version 1.1;
    gzip_types       text/plain application/x-javascript text/css text/shtml application/xml;

    chunked_transfer_encoding off;
    
    init_by_lua_block {
        local orange = require("orange.orange")
        local env_orange_conf = os.getenv("ORANGE_CONF")
        print(string.char(27) .. "[34m" .. "[INFO]" .. string.char(27).. "[0m", [[the env[ORANGE_CONF] is ]], env_orange_conf)

        local config_file = env_orange_conf or "./conf/orange.conf"
        local config, store, redis = orange.init({
            config = config_file
        })

        -- the orange context
        context = {
            orange = orange,
            store = store,
            redis = redis,
            config = config
        }
    }

    init_worker_by_lua_block {
        local orange = context.orange
        orange.init_worker()
    }

    # upstream backend_proxy {
    #    server localhost:8081;
    # }
	
	map $http_upgrade $upstream_connection {
        default keep-alive;
        websocket upgrade;
    }
    
    map $http_upgrade $upstream_upgrade {
        default '';
        websocket websocket;
    }
    
    #----------------------------Orange configuration-----------------------------
    lua_package_path '../?.lua;/var/wd/servers/openresty/orange/?.lua;/var/wd/baseapi/ext/?.lua;/var/wd/servers/openresty/lor/lor/?.lua;;';
    lua_code_cache on;
    lua_shared_dict lua_cache 300m;

    lua_shared_dict orange_data 20m; # should not removed. used for orange data, e.g. plugins configurations..

    lua_shared_dict status 1m; # used for global statistic, see plugin: stat
    lua_shared_dict waf_status 1m; # used for waf statistic, see plugin: waf
    lua_shared_dict monitor 10m; # used for url monitor statistic, see plugin: monitor
    lua_shared_dict rate_limit 10m; # used for rate limiting count, see plugin: rate_limiting
    lua_shared_dict property_rate_limiting 10m; # used for rate limiting count, see plugin: rate_limiting

    # main internal server
    server {
        listen       10080;
        server_name  ${SERVER_NAME_INTERNAL};
        
        access_log  ./logs/access.internal.log  main;
        error_log ./logs/error.internal.log info;
        
        # proxy
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header Host $upstream_host;
        proxy_set_header Upgrade $upstream_upgrade;
        proxy_set_header Connection $upstream_connection;
        
        proxy_read_timeout 30; 
        proxy_connect_timeout 10; 
        client_max_body_size 32M;
        
        proxy_pass_header Server;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location / {
            set $backend_proxy  '';
            set $upstream_host  '';
            
            rewrite_by_lua_block {
                local orange = context.orange
                orange.redirect()
                orange.rewrite()
                orange.proxy(0)
            }
            
            proxy_pass http://$backend_proxy;

            access_by_lua_block {
                local orange = context.orange
                -- orange.access()
                
            }
            
            header_filter_by_lua_block {
                local orange = context.orange
                orange.header_filter()
            }

            body_filter_by_lua_block {
                local orange = context.orange
                orange.body_filter()
            }

            log_by_lua_block {
                local orange = context.orange
                orange.log()
            }
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }

    # main external server
    server {
        listen       10081;
        server_name  ${SERVER_NAME_EXTERNAL};
        
        access_log  ./logs/access.external.log  main;
        error_log ./logs/error.external.log info;
        
        # proxy
        proxy_http_version 1.1;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Scheme $scheme;
        proxy_set_header Host $upstream_host;
        proxy_set_header Upgrade $upstream_upgrade;
        proxy_set_header Connection $upstream_connection;
        
        proxy_read_timeout 30; 
        proxy_connect_timeout 10; 
        client_max_body_size 32M;
        
        proxy_pass_header Server;

        location = /favicon.ico {
            log_not_found off;
            access_log off;
        }

        location / {
            set $backend_proxy  '';
            set $upstream_host  '';
            
            rewrite_by_lua_block {
                local orange = context.orange
                orange.proxy(1)
            }
            
            proxy_pass http://$backend_proxy;

            access_by_lua_block {
                local orange = context.orange
                orange.access()
            }
            
            header_filter_by_lua_block {
                local orange = context.orange
                orange.header_filter()
            }

            body_filter_by_lua_block {
                local orange = context.orange
                orange.body_filter()
            }

            log_by_lua_block {
                local orange = context.orange
                orange.log()
            }
        }

        location /robots.txt {
            return 200 'User-agent: *\nDisallow: /';
        }
    }


    # orange dashboard server
    # server {
    #    listen       10088;
    #    stub_status on;
    #    #server_name  localhost;
    #    access_log ./logs/dashboard_access.log main;
    #    error_log ./logs/dashboard_error.log info;
    #
    #    location = /favicon.ico {
    #        log_not_found off;
    #        access_log off;
    #    }
    #
    #    location /robots.txt {
    #        return 200 'User-agent: *\nDisallow: /';
    #    }
    #
    #    # dashboard的静态文件
    #    location ~* /static/(.*) {
    #        alias ./dashboard/static/$1;
    #    }
    #
    #    location / {
    #        set $template_root '';
    #        content_by_lua_block {
    #            context.views_path = ngx.config.prefix() .. "/dashboard/views"
    #            local main = require("dashboard.main")
    #            main:run()
    #        }
    #    }
    # }
}
